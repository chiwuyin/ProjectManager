为了将本地 `E:\Projects\adgen` 文件提交到远程仓库的 `dev` 分支上，你可以按照以下步骤操作。这个过程包括初始化本地仓库、添加远程仓库地址、切换到目标分支并推送代码。

### 步骤 1: 初始化本地 Git 仓库

如果你还没有在 `E:\Projects\adgen` 目录下初始化 Git 仓库，请先进行初始化：

```bash
cd E:\Projects\adgen
git init
```

### 步骤 2: 添加远程仓库

添加远程仓库地址（替换 `your-username` 和 `your-password` 为实际的用户名和密码或使用个人访问令牌，如果仓库需要认证）：

```bash
git remote add origin http://your-username:your-password@git-net.dev.vp/net/adgen.git
```

> 注意：对于 HTTPS URL，更安全的做法是配置凭据助手而不是直接在命令中包含密码，例如使用 Git 凭据管理器。

### 步骤 3: 获取远程分支信息

获取远程仓库的所有分支信息，以便你可以看到 `dev` 分支：

```bash
git fetch origin
```

### 步骤 4: 切换到 dev 分支

现在，基于远程的 `dev` 分支创建一个本地的 `dev` 分支，并切换到该分支：

```bash
git checkout -b dev origin/dev
```

如果 `origin/dev` 不存在（因为远程仓库为空），你可以直接创建一个新的 `dev` 分支：

```bash
git checkout -b dev
```

### 步骤 5: 添加文件并提交

将你的项目文件添加到暂存区，并进行提交：

```bash
git add .
git commit -m "Initial commit"
```

### 步骤 6: 推送到远程 dev 分支

最后，将本地 `dev` 分支上的更改推送到远程仓库的 `dev` 分支：

```bash
git push origin dev
```

### 额外提示

- **保持主干干净**：确保只向 `dev` 分支推送开发中的代码，避免直接修改 `main` 分支，除非你准备发布新版本。
- **定期同步**：定期从远程仓库拉取最新代码(`git pull`)以保持本地代码库与远程同步。
- **使用分支策略**：考虑采用 Git Flow 或者其他分支管理策略来更好地组织开发流程。

通过上述步骤，你应该能够顺利地将本地项目的代码提交到指定的 `dev` 分支上。
